# generator.py
"""
Generate an article payload and save to outbox/.
Tries to call ollama if available; otherwise produces a basic stub article.
"""

import os, json, time, subprocess, tempfile, hashlib
OUTBOX = "outbox"
os.makedirs(OUTBOX, exist_ok=True)

DEFAULT_NICHE = "personal finance"

def call_ollama_prompt(prompt: str, model="mistral"):
    try:
        # write prompt to temp file and call ollama if in PATH
        with tempfile.NamedTemporaryFile("w", delete=False) as tf:
            tf.write(prompt)
            pf = tf.name
        proc = subprocess.run(["ollama", "run", model, "--prompt-file", pf],
                              capture_output=True, text=True, timeout=180)
        if proc.returncode == 0:
            return proc.stdout
        else:
            print("[generator] Ollama returned error:", proc.stderr[:400])
            return None
    except FileNotFoundError:
        print("[generator] Ollama not found.")
        return None
    except Exception as e:
        print("[generator] Ollama call exception:", e)
        return None

def build_stub_article(topic, niche=DEFAULT_NICHE):
    title = f"{topic} â€” Quick Guide"
    description = f"Short practical guide on {topic}."
    body = (
        f"TL;DR\n\nThis article gives practical tips about {topic}.\n\n"
        "## Why this matters\n\n"
        "Many people struggle with this topic. Below are practical steps to get started.\n\n"
        "## Steps\n\n"
        "1. Step one: Start with small actions.\n\n"
        "2. Step two: Keep a simple plan.\n\n"
        "## Final thoughts\n\n"
        "This is a short placeholder article. Replace with a full draft generated by an LLM when available.\n"
    )
    tags = [niche, topic.split()[0].lower(), "guide"]
    return {"title": title, "description": description, "tags": tags, "body_markdown": body}

def save_payload(payload: dict):
    slug = hashlib.sha1((payload.get("title","untitled") + str(time.time())).encode()).hexdigest()[:8]
    fname = os.path.join(OUTBOX, f"{time.strftime('%Y-%m-%d')}-{slug}.json")
    with open(fname, "w", encoding="utf-8") as f:
        json.dump(payload, f, ensure_ascii=False, indent=2)
    print("[generator] Saved payload to", fname)
    return fname

def generate(niche="personal finance", topic=None):
    if not topic:
        # choose simple default topic from niche
        topic = "simple budgeting tips"
    prompt = (
        f"You are a content generator for niche: {niche}. Produce an SEO-friendly Medium article on '{topic}'.\n"
        "- Produce title (<=70 chars), short description (<=150 chars), tags (list), and body_markdown.\n"
        "- body_markdown must include a TL;DR, at least 2 H2 headings, and a small bullet list.\n"
        "Return only the article in JSON format with fields: title, description, tags, body_markdown.\n"
    )

    resp = call_ollama_prompt(prompt)
    if resp:
        # attempt to extract JSON from response; some LLMs may return free text; fall back to stub if parse fails
        import re, json
        m = re.search(r'(\{.*\})', resp, re.S)
        if m:
            try:
                j = json.loads(m.group(1))
                save_payload(j)
                return j
            except Exception:
                pass
        # If no JSON, create a simple structure with returned text as body
        j = {"title": topic.title(), "description": topic, "tags": [niche], "body_markdown": resp}
        save_payload(j)
        return j
    else:
        # Ollama not available: return stub article
        j = build_stub_article(topic, niche=niche)
        save_payload(j)
        return j

if __name__ == "__main__":
    generate()
